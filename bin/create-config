#!/usr/bin/env node
// Ghost Configuration for Heroku

var fs = require("fs");
var path = require("path");
var url = require("url");

var envValues = require("./common/env-values");
var appRoot = path.join(__dirname, "..");

function createConfig() {
  var fileStorage, storage;

  if (!!process.env.QINIU_BUCKET_NAME) {
    fileStorage = true;
    storage = {
      active: "qn-store",
      // 'ghost-s3': {
      //   accessKeyId:     process.env.S3_ACCESS_KEY_ID,
      //   secretAccessKey: process.env.S3_ACCESS_SECRET_KEY,
      //   bucket:          process.env.S3_BUCKET_NAME,
      //   region:          process.env.S3_BUCKET_REGION,
      //   assetHost:       process.env.S3_ASSET_HOST_URL
      // }
      "qn-store": {
        accessKey: process.env.QINIU_ACCESS_KEY,
        secretKey: process.env.QINIU_SECRET_KEY,
        bucket: process.env.QINIU_BUCKET_NAME,
        origin: process.env.QINIU_DOMAIN,
        // timeout: 3600000, // default rpc timeout: one hour, optional
        // if your app outside of China, please set `uploadURL` to `http://up.qiniug.com/`
        uploadURL: "http://up.qiniu.com/",

        // file storage key config [optional]
        // if `fileKey` not set, Qiniu will use `SHA1` of file content as key.
        fileKey: {
          // use Qiniu hash as file basename, if set, `safeString` will be ignored
          hashAsBasename: false,
          safeString: true, // use Ghost safaString util to rename filename, e.g. Chinese to Pinyin
          prefix: "YYYY/MM/", // {String | Function} will be formated by moment.js, using `[]` to escape,
          suffix: "", // {String | Function} string added before file extname.
          extname: true, // keep file's extname
        },
        // take `外面的世界 x.jpg` as example,
        // applied above options, you will get an URL like below after uploaded:
        //  http://xx.xx.xx.glb.clouddn.com/2016/06/wai-mian-de-shi-jie-x.jpg
      },
    };
  } else {
    fileStorage = false;
    storage = {};
  }

  config = {
    url: process.env.PUBLIC_URL,
    logging: {
      level: "info",
      transports: ["stdout"],
    },
    mail: {
      transport: "SMTP",
      options: {
        service: "Mailgun",
        auth: {
          user: process.env.MAILGUN_SMTP_LOGIN,
          pass: process.env.MAILGUN_SMTP_PASSWORD,
        },
      },
    },
    fileStorage: fileStorage,
    storage: storage,
    database: {
      client: "mysql",
      connection: getMysqlConfig(envValues.mysqlDatabaseUrl),
      pool: { min: 0, max: process.env.MYSQL_POOL_LIMIT || 5 },
      debug: false,
    },
    server: {
      host: "0.0.0.0",
      port: process.env.PORT,
    },
    paths: {
      contentPath: path.join(appRoot, "/content/"),
    },
  };

  return config;
}

function getMysqlConfig(connectionUrl) {
  if (connectionUrl == null) {
    return {};
  }

  var dbConfig = url.parse(connectionUrl);
  if (dbConfig == null) {
    return {};
  }

  var dbAuth = dbConfig.auth ? dbConfig.auth.split(":") : [];
  var dbUser = dbAuth[0];
  var dbPassword = dbAuth[1];

  if (dbConfig.pathname == null) {
    var dbName = "ghost";
  } else {
    var dbName = dbConfig.pathname.split("/")[1];
  }

  var dbConnection = {
    host: dbConfig.hostname,
    port: dbConfig.port || "3306",
    user: dbUser,
    password: dbPassword,
    database: dbName,
  };
  return dbConnection;
}

var configContents = JSON.stringify(createConfig(), null, 2);
fs.writeFileSync(path.join(appRoot, "config.production.json"), configContents);
